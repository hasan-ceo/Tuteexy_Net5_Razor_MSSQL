@using Tuteexy.Utility
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-0Z9NNWXSFP"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-0Z9NNWXSFP');
    </script>
    <script data-ad-client="ca-pub-9245786985241622" async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <meta name="google-site-verification" content="9JXFIJVZK3bPzqZtnaoylDrUMO0C9mPOZ6TfOIWn_Rc" />

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tuteexy - For Student, Develop by Student</title>
    <link rel="icon" href="/Images/core/icon.png" sizes="any" type="image/svg+xml">


    <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/layoutfront.css" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />

</head>
<body>
    <header>
        <nav class="navbar navbar-expand bg-white justify-content-center fixed-top p-0 shadow-sm">
            <div class="container-fluid">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link d-flex flex-column" asp-area="Front" asp-controller="Home" asp-action="Index">
                            <img src="~/images/core/logo.png" alt="" style="height: 30px;">
                        </a>
                    </li>
                </ul>

                <ul class="navbar-nav w-100 text-center justify-content-end mt-0">
                    <li class="nav-item">
                        <a class="nav-link d-flex flex-column text-success" asp-area="Front" asp-controller="Home" asp-action="TutorJobs">
                            <span class="fas fa-chalkboard-teacher fa-1x"></span>
                            <span class="d-sm-inline mt-1">Tutor Job</span>
                        </a>
                    </li>
                    @*  <li class="nav-item">
            <a class="nav-link d-flex flex-column text-success" asp-area="Identity" asp-page="/Account/Register">
                <span class="fas fa-user fa-1x"></span>
                <span class="d-sm-inline mt-1">Start Free</span>
            </a>
        </li>*@

                </ul>
</div>
        </nav>
    </header>

    @RenderBody()



    <footer class="container shadow bg-white mt-4 pt-4 pb-2">
        <div class="row">
            <div class="col-12">
                <p class="center">
                    Work together as a team, with:
                </p>
            </div>
            <div class="col-12">
                <a class="center" asp-area="Front" asp-controller="Home" asp-action="index">
                    <img src="~/images/core/logo.png" class="image" style="width:150px">
                </a>
            </div>
            <hr class="w-100">
            <div class="col-12">
                <p class="center text-center">
                    ©
                    <script>
                        document.write(new Date().getFullYear())
                    </script>, Built with your best interests at heart <i class="fa fa-heart heart"></i> by Tuteexy

                </p>
            </div>
        </div>

    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script src="~/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="https://kit.fontawesome.com/e6e889a173.js" crossorigin="anonymous"></script>
    @RenderSection("Scripts", required: false)
    <partial name="_NavBurgerScriptsPartial" />

    <script>
            (function ($) {
                $.fn.countTo = function (options) {
                    options = options || {};

                    return $(this).each(function () {
                        // set options for current element
                        var settings = $.extend({}, $.fn.countTo.defaults, {
                            from: $(this).data('from'),
                            to: $(this).data('to'),
                            speed: $(this).data('speed'),
                            refreshInterval: $(this).data('refresh-interval'),
                            decimals: $(this).data('decimals')
                        }, options);

                        // how many times to update the value, and how much to increment the value on each update
                        var loops = Math.ceil(settings.speed / settings.refreshInterval),
                            increment = (settings.to - settings.from) / loops;

                        // references & variables that will change with each update
                        var self = this,
                            $self = $(this),
                            loopCount = 0,
                            value = settings.from,
                            data = $self.data('countTo') || {};

                        $self.data('countTo', data);

                        // if an existing interval can be found, clear it first
                        if (data.interval) {
                            clearInterval(data.interval);
                        }
                        data.interval = setInterval(updateTimer, settings.refreshInterval);

                        // initialize the element with the starting value
                        render(value);

                        function updateTimer() {
                            value += increment;
                            loopCount++;

                            render(value);

                            if (typeof (settings.onUpdate) == 'function') {
                                settings.onUpdate.call(self, value);
                            }

                            if (loopCount >= loops) {
                                // remove the interval
                                $self.removeData('countTo');
                                clearInterval(data.interval);
                                value = settings.to;

                                if (typeof (settings.onComplete) == 'function') {
                                    settings.onComplete.call(self, value);
                                }
                            }
                        }

                        function render(value) {
                            var formattedValue = settings.formatter.call(self, value, settings);
                            $self.html(formattedValue);
                        }
                    });
                };

                $.fn.countTo.defaults = {
                    from: 0,               // the number the element should start at
                    to: 0,                 // the number the element should end at
                    speed: 1000,           // how long it should take to count between the target numbers
                    refreshInterval: 100,  // how often the element should be updated
                    decimals: 0,           // the number of decimal places to show
                    formatter: formatter,  // handler for formatting the value before rendering
                    onUpdate: null,        // callback method for every time the element is updated
                    onComplete: null       // callback method for when the element finishes updating
                };

                function formatter(value, settings) {
                    return value.toFixed(settings.decimals);
                }
            }(jQuery));

        jQuery(function ($) {
            // custom formatting example
            $('.count-number').data('countToOptions', {
                formatter: function (value, options) {
                    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
                }
            });

            // start all the timers
            $('.timer').each(count);

            function count(options) {
                var $this = $(this);
                options = $.extend({}, options || {}, $this.data('countToOptions') || {});
                $this.countTo(options);
            }
        });
    </script>
</body>
</html>
